// <auto-generated />
using System;
using HotelCaseManagment.DataSource;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;

namespace HotelCaseManagment.DataSource.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.Booking", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BookingEnd");

                    b.Property<DateTime>("BookingStart");

                    b.Property<Guid>("RoomID");

                    b.Property<double>("TotaltPrice");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.Manager", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdmin");

                    b.Property<DateTime>("LastesLogin");

                    b.Property<Guid>("PersonID");

                    b.HasKey("ID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.ManagerErrorLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ErrorCode");

                    b.Property<DateTime>("ErrorDate");

                    b.Property<Guid?>("ManagerID");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("ManagerErrorLog");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.ManagmentLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ManagerID");

                    b.Property<string>("ManagerLogText");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("ManagmentLog");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Addres");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("SecondName");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastDayCleaned");

                    b.Property<double>("Price");

                    b.Property<string>("RoomDescription");

                    b.Property<int>("Sleeps");

                    b.HasKey("ID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastesLogin");

                    b.Property<Guid>("PersonID");

                    b.HasKey("Id");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.UserErrorLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ErrorCode");

                    b.Property<DateTime>("ErrorDate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("UserErrorLog");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.Booking", b =>
                {
                    b.HasOne("HotelCaseManagment.Domain.Domains.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HotelCaseManagment.Domain.Domains.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.Manager", b =>
                {
                    b.HasOne("HotelCaseManagment.Domain.Domains.Person", "Person")
                        .WithMany("Managers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.ManagerErrorLog", b =>
                {
                    b.HasOne("HotelCaseManagment.Domain.Domains.Manager", "Manager")
                        .WithMany("ManagerErrorLogs")
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.ManagmentLog", b =>
                {
                    b.HasOne("HotelCaseManagment.Domain.Domains.Manager", "Manager")
                        .WithMany("ManagmentLogs")
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.User", b =>
                {
                    b.HasOne("HotelCaseManagment.Domain.Domains.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelCaseManagment.Domain.Domains.UserErrorLog", b =>
                {
                    b.HasOne("HotelCaseManagment.Domain.Domains.User", "User")
                        .WithMany("UserErrorLogs")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
